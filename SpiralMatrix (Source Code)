class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        
        // List to store the elements in spiral order
        List<Integer> nums = new LinkedList<>();
        
        // Define boundaries for traversal
        int top = 0;                   // Top boundary (starting row)
        int down = matrix.length - 1;   // Bottom boundary (last row)
        int left = 0;                   // Left boundary (starting column)
        int right = matrix[0].length - 1; // Right boundary (last column)

        // Continue looping while there are elements to process
        while (true) {
            
            // Traverse from left to right along the top row
            for (int i = left; i <= right; i++) {
                nums.add(matrix[top][i]);
            }
            top++; // Move the top boundary downward
            if (left > right || top > down) break; // Check if traversal should stop
            
            // Traverse from top to bottom along the rightmost column
            for (int i = top; i <= down; i++) {
                nums.add(matrix[i][right]);
            }
            right--; // Move the right boundary leftward
            if (left > right || top > down) break;
            
            // Traverse from right to left along the bottom row
            for (int i = right; i >= left; i--) {
                nums.add(matrix[down][i]);
            }
            down--; // Move the bottom boundary upward
            if (left > right || top > down) break;
            
            // Traverse from bottom to top along the leftmost column
            for (int i = down; i >= top; i--) {
                nums.add(matrix[i][left]);
            }
            left++; // Move the left boundary rightward
            if (left > right || top > down) break;
        }
        
        // Return the list containing elements in spiral order
        return nums;
    }
}
